#!/usr/bin/python
# Copyright (c) 2014, Ralf Jung <post@ralfj.de>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.

import cgi, os, sys, subprocess
form = cgi.FieldStorage(keep_blank_values=True)

# print headers
print "Content-Type: text/plain"
print ""

# get input
if "password" not in form or "domain" not in form or ("ip" not in form and "ipv6" not in form):
    print "Mandatory argument missing: You must supply all of 'password', 'domain' and at least either 'ip' or 'ipv6'"
    sys.exit()

domain = form.getfirst("domain")
password = form.getfirst("password")
ip = form.getfirst("ip")
ipv6 = form.getfirst("ipv6")
assert domain is not None and password is not None
assert ip is not None or ipv6 is not None

# run update program
args = ["/var/lib/bind/dyn-nsupdate", "--domain", domain, "--password", password]
if ip is not None:
    args += ["--ipv4", ip]
if ipv6 is not None:
    args += ["--ipv6", ipv6]
p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()

# check what it did
if p.returncode or stderr or stdout:
    # error :/
    print "There was an error while updating the DNS: Return code %d" % p.returncode
    if stdout: print stdout
    if stderr: print stderr
else:
    print "good",
    if ip is not None:
        print ip,
    if ipv6 is not None:
        print ipv6,
    print
