#!/usr/bin/python3
# Copyright (c) 2014, Ralf Jung <post@ralfj.de>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.

import urllib.request, socket, sys, argparse

# configuration variables
domains = ['domain.dyn.ralfj.de'] # list of domains to update
password = 'yourpassword'
haveIPv4 = True
haveIPv6 = False

serverIPv4 = 'ipv4.ns.ralfj.de' # Only needed if haveIPv4 is True. This server should NOT have an AAAA record!
serverIPv6 = 'ipv6.ns.ralfj.de' # Only needed if haveIPv6 is True. This server should NOT have an A record!
server     = 'ns.ralfj.de'
# END of configuration variables

def urlopen(url):
    return urllib.request.urlopen(url).read().decode('utf-8').strip()

def getMyIP(server):
    return urlopen('https://'+server+'/checkip')

def getCurIP(domain, family):
    try:
        addr = socket.getaddrinfo(domain, None, family=family)
        return addr[0][4][0]
    except socket.gaierror: # domain not found
        return ""

def getCurIPv4(domain):
    return getCurIP(domain, socket.AF_INET)

def getCurIPv6(domain):
    return getCurIP(domain, socket.AF_INET6)

def update_domain(server, domain, ipv4, ipv6, password, verbose):
    '''Update the given domain, using the server, password. ipv4 or ipv6 can be None to not update that record. Returns True on success, False on failure.'''
    assert ipv4 is not None or ipv6 is not None
    
    # check what the domain is currently mapped to
    curIPv4 = getCurIPv4(domain)
    curIPv6 = getCurIPv6(domain)
    if verbose:
        print("Current status of domain {0} is: IPv4 address '{1}', IPv6 address '{2}'".format(domain, curIPv4, curIPv6))
    
    # check if there's something to do
    needUpdate = (ipv4 is not None and curIPv4 != ipv4) or (ipv6 is not None and curIPv6 != ipv6)
    if not needUpdate:
        if verbose:
            print("Everything alread up-to-date, nothing to do")
        return True

    # we need to update the IP
    url = 'https://'+server+'/update?password='+urllib.parse.quote(password)+'&domain='+urllib.parse.quote(domain)
    expected = "good"
    if ipv4 is not None:
        url += '&ip='+urllib.parse.quote(ipv4)
        expected += " "+ipv4
    if ipv6 is not None:
        url += '&ipv6='+urllib.parse.quote(ipv6)
        expected += " "+ipv6
    result = urlopen(url)
    
    # did everything go as planned?
    if result == expected:
        if verbose:
            print("Successfully updated domain",domain)
        # all went all right
        return True
    else:
        # Something went wrong
        print("Unexpected answer from server",server,"while updating",domain)
        print(result)
        return False

if __name__ == "__main__":
    # allow overwriting some values on the command-line
    parser = argparse.ArgumentParser(description='Update a domain managed by a dyn-nsupdate server')
    parser.add_argument("-p", "--password",
                        dest="password", default=password,
                        help="The password used to update the domains")
    parser.add_argument("-v", "--verbose",
                        action="store_true", dest="verbose",
                        help="Be more verbose")
    parser.add_argument("domains",  metavar='DOMAIN', nargs='*', default=domains,
                        help="The domains to update")
    args = parser.parse_args()

    # get our own IPv4
    if haveIPv4:
        myIPv4 = getMyIP(serverIPv4)
        if args.verbose:
            print("My IPv4 is",myIPv4)
    else:
        myIPv4 = None
    # and IPv6
    if haveIPv6:
        myIPv6 = getMyIP(serverIPv6)
        if args.verbose:
            print("My IPv6 is",myIPv6)
    else:
        myIPv6 = None

    # update all the domains
    exitcode = 0
    for domain in args.domains:
        if not update_domain(server, domain, myIPv4, myIPv6, args.password, verbose=args.verbose):
            exitcode = 1
    sys.exit(exitcode)
